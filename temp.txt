import React, { useState } from "react";

// Define types for form structure
interface ContentType {
  id: string;
  title: string;
  link?: string;
  subtitle?: string;
  shortDesc: string;
  description: string;
  images: string[];
  createdDateTime: string;
  updateDateTime: string;
  author: string;
}

interface FormData {
  contentTypeId: string;
  content: ContentType[];
}

const DynamicForm: React.FC = () => {
  // State for form data
  const [formData, setFormData] = useState<FormData>({
    contentTypeId: "",
    content: [],
  });

  // Function to update content fields
  const updateContent = (index: number, key: keyof ContentType, value: any) => {
    const updatedContent = [...formData.content];
    updatedContent[index] = { ...updatedContent[index], [key]: value };
    setFormData({ ...formData, content: updatedContent });
  };

  // Function to add a new content section
  const addContent = () => {
    setFormData({
      ...formData,
      content: [
        ...formData.content,
        {
          id: Date.now().toString(),
          title: "",
          shortDesc: "",
          description: "",
          images: [],
          createdDateTime: new Date().toISOString(),
          updateDateTime: new Date().toISOString(),
          author: "",
        },
      ],
    });
  };

  // Function to remove a content section
  const removeContent = (index: number) => {
    const updatedContent = formData.content.filter((_, i) => i !== index);
    setFormData({ ...formData, content: updatedContent });
  };

  // Function to handle multiple image uploads
  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>, index: number) => {
    const files = e.target.files ? Array.from(e.target.files) : [];
    const readerPromises = files.map((file) => {
      return new Promise<string>((resolve) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result as string);
        reader.readAsDataURL(file);
      });
    });

    Promise.all(readerPromises).then((base64Images) => {
      const updatedImages = [...formData.content[index].images, ...base64Images];
      updateContent(index, "images", updatedImages);
    });
  };

  // Function to remove a specific image
  const removeImage = (contentIndex: number, imageIndex: number) => {
    const updatedImages = [...formData.content[contentIndex].images];
    updatedImages.splice(imageIndex, 1);
    updateContent(contentIndex, "images", updatedImages);
  };

  // Function to handle form submission
  const handleSubmit = () => {
    console.log("Form Data:", formData);
  };

  return (
    <div>
      {/* Input for contentTypeId */}
      <label>Content Type ID:</label>
      <input
        type="text"
        value={formData.contentTypeId}
        onChange={(e) => setFormData({ ...formData, contentTypeId: e.target.value })}
      />

      {/* Button to add new content block */}
      <button onClick={addContent}>Add Content</button>

      {/* Dynamic Content Fields */}
      {formData.content.map((content, index) => (
        <div key={content.id}>
          <input
            type="text"
            placeholder="Title"
            value={content.title}
            onChange={(e) => updateContent(index, "title", e.target.value)}
          />
          <input
            type="text"
            placeholder="Short Description"
            value={content.shortDesc}
            onChange={(e) => updateContent(index, "shortDesc", e.target.value)}
          />
          <textarea
            placeholder="Description"
            value={content.description}
            onChange={(e) => updateContent(index, "description", e.target.value)}
          />
          <input
            type="text"
            placeholder="Author"
            value={content.author}
            onChange={(e) => updateContent(index, "author", e.target.value)}
          />

          {/* Multiple Image Upload */}
          <label>Upload Images:</label>
          <input type="file" multiple onChange={(e) => handleImageUpload(e, index)} />

          {/* Image Preview with Remove Button */}
          {content.images.length > 0 && (
            <div>
              {content.images.map((img, imgIndex) => (
                <div key={imgIndex}>
                  <img src={img} alt="Preview" width="100" />
                  <button onClick={() => removeImage(index, imgIndex)}>Remove Image</button>
                </div>
              ))}
            </div>
          )}

          {/* Remove Content Section */}
          <button onClick={() => removeContent(index)}>Remove Content</button>
        </div>
      ))}

      {/* Submit Button */}
      <button onClick={handleSubmit}>Submit</button>
    </div>
  );
};

export default DynamicForm;